@model Inmobiliaria10.Models.Contrato

@{
    // Para precargar la cascada si viene seteado desde el controller
    var tipoSel = (string)(ViewBag.TipoSel?.ToString() ?? "");
    var inmSel  = Model?.IdInmueble > 0 ? Model.IdInmueble.ToString() : "";
}

<div class="d-flex justify-content-center">
    <div class="form-card w-100" style="max-width: 900px;">
        <div class="form-title">Editar contrato</div>

        <form asp-controller="Contrato" asp-action="Editar" asp-route-id="@Model.IdContrato" method="post" class="row g-3" novalidate>
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(false, "", new { @class = "text-danger" })

            @Html.HiddenFor(m => m.IdContrato)

            <!-- Fila 1: Tipo + Inquilino -->
            <div class="col-12 col-lg-6">
                <label class="form-label">Tipo de inmueble</label>
                @* ViewBag.Tipos: SelectList(IdTipo, DenominacionTipo) *@
                @Html.DropDownList("tipo", (SelectList)ViewBag.Tipos, "Seleccione tipo",
                    new { @class = "form-select", id = "tipoSelect" })
            </div>

            <div class="col-12 col-lg-6">
                <label class="form-label">Inquilino</label>
                @Html.DropDownListFor(m => m.IdInquilino, (SelectList)ViewBag.Inquilinos,
                    "Seleccione inquilino", new { @class = "form-select" })
                @Html.ValidationMessageFor(m => m.IdInquilino, "", new { @class = "text-danger" })
            </div>

            <!-- Fila 2: Inmueble (Dirección + Piso + Dpto) -->
            <div class="col-12">
                <label class="form-label">Inmueble (Dirección · Piso · Dpto)</label>
                @Html.DropDownListFor(m => m.IdInmueble, (SelectList)ViewBag.Inmuebles,
                    "Seleccione inmueble", new { @class = "form-select", id = "inmuebleSelect" })
                @Html.ValidationMessageFor(m => m.IdInmueble, "", new { @class = "text-danger" })
            </div>

            <!-- Fila 3: Fechas inicio / fin -->
            <div class="col-12 col-md-6">
                <label class="form-label">Fecha inicio</label>
                @Html.TextBoxFor(m => m.FechaInicio, "{0:yyyy-MM-dd}",
                    new { @class = "form-control", type = "date" })
                @Html.ValidationMessageFor(m => m.FechaInicio, "", new { @class = "text-danger" })
            </div>

            <div class="col-12 col-md-6">
                <label class="form-label">Fecha fin</label>
                @Html.TextBoxFor(m => m.FechaFin, "{0:yyyy-MM-dd}",
                    new { @class = "form-control", type = "date" })
                @Html.ValidationMessageFor(m => m.FechaFin, "", new { @class = "text-danger" })
            </div>

            <!-- Fila 4: Rescisión / Monto -->
            <div class="col-12 col-md-6">
                <label class="form-label">Fecha de rescisión</label>
                @Html.TextBoxFor(m => m.Rescision, "{0:yyyy-MM-dd}",
                    new { @class = "form-control", type = "date" })
                @Html.ValidationMessageFor(m => m.Rescision, "", new { @class = "text-danger" })
            </div>

            <div class="col-12 col-md-6">
                <label class="form-label">Monto de multa</label>
                @Html.TextBoxFor(m => m.MontoMulta,
                    new { @class = "form-control", type = "number", step = "0.01", min = "0" })
                @Html.ValidationMessageFor(m => m.MontoMulta, "", new { @class = "text-danger" })
            </div>

            <!-- Fila 5: Botones centrados -->
            <div class="col-12">
                <div class="d-flex justify-content-center gap-3 mt-4 pt-1">
                    <button type="submit" class="btn btn-save px-4">Guardar</button>
                    <a asp-action="Index" class="btn btn-back px-4">Volver</a>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts{
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
    document.addEventListener('DOMContentLoaded', async () => {
        const tipo = document.getElementById('tipoSelect');
        const comboInm = document.getElementById('inmuebleSelect');

        async function cargarInmueblesPorTipo(idTipo, selectedValue){
            comboInm.innerHTML = '<option value="">Seleccione inmueble</option>';
            if(!idTipo) return;

            try{
                const resp = await fetch(`/Contrato/InmueblesPorTipo?idTipo=${encodeURIComponent(idTipo)}`);
                if(!resp.ok) throw new Error('HTTP ' + resp.status);
                const data = await resp.json(); // [{id, texto}]
                data.forEach(x => {
                    const opt = document.createElement('option');
                    opt.value = x.id;
                    opt.textContent = x.texto;
                    comboInm.appendChild(opt);
                });
                if (selectedValue) comboInm.value = selectedValue;
            }catch(e){
                console.error(e);
            }
        }

        // Cascada
        tipo.addEventListener('change', () => cargarInmueblesPorTipo(tipo.value, ""));

        // Precarga (controller setea ViewBag.TipoSel e IdInmueble)
        const preTipo = '@tipoSel';
        const preInm  = '@inmSel';
        if (preTipo) {
            await cargarInmueblesPorTipo(preTipo, preInm);
        }
    });
    </script>
}
